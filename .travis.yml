dist: focal
language: c
compiler: clang-10
services:
    - docker
git:
    submodules: false

addons:
    apt:
        sources:
        - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main'
          key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
        packages:
        - clang-10
        - clang-tools-10
        - libc++-10-dev

jobs:
    include:
#
# Whitespace check
#
    - env:
        - TEST="whitespace"
      script:
        - git remote add upstream https://github.com/$TRAVIS_REPO_SLUG.git
        - git fetch upstream
        - git diff --check upstream/master

#
# Astyle check
#
    - env:
        - TEST="astyle"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install astyle
      script:
        - export ARTISTIC_STYLE_OPTIONS=".astylerc" && astyle -Q `find . -name "*.c" -o -name ".h" -o -name ".cpp" -name ".hpp"` > astyle.out
        - TEST=$(cat astyle.out | wc -l)
        - |
          if [[ $TEST -ne 0 ]]; then
            cat astyle.out
            git --no-pager diff
            echo "Please fix style issues as shown above"
            exit 1
          fi

#
# cppcheck
#
    - env:
        - TEST="cppcheck"
      addons:
        snaps:
          - cppcheck
      script:
        - cppcheck --error-exitcode=1 --force ./src

#
# compile tests
#
    - env:
        - TEST="compile"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      install:
        - ./autogen.sh
      script:
        - ./configure || cat config.log
        - make
        - sudo make install

    - env:
        - TEST="compile with plugin disabled"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      install:
        - ./autogen.sh
      script:
        - ./configure --disable-plugin-syscalls || cat config.log
        - make
        - sudo make install

    - env:
        - TEST="compile debug"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure--disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      install:
        - ./autogen.sh
      script:
        - ./configure --enable-debug --enable-sanitize || cat config.log
        - make
        - sudo make install

    - env:
        - TEST="compile debug with plugin disabled"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      install:
        - ./autogen.sh
      script:
        - ./configure --enable-debug --disable-plugin-syscalls || cat config.log
        - make
        - sudo make install

    - env:
        - TEST="compile from make dist tarball"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      script:
        - ./autogen.sh
        - ./configure || cat config.log
        - make dist
        - mkdir build && cd build
        - tar xvf ../drakvuf-*.tar.gz
        - cd *drakvuf*
        - ./autogen.sh
        - ./configure || cat config.log
        - make
        - sudo make install

    - env:
        - TEST="compile debug with REPL enabled"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev python3-dev python3-pip python3-setuptools
        - sudo pip3 install ctypesgen ipython
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      install:
        - ./autogen.sh
      script:
        - ./configure --enable-debug --enable-sanitize --enable-repl || cat config.log
        - make

#
# clang scan-build
#
    - env:
        - TEST="scan-build"
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
      install:
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
        - ./autogen.sh
      script:
        - scan-build-10 --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores ./configure --enable-debug
        - scan-build-10 --status-bugs --use-cc=clang-10 --use-c++=clang++-10 -analyze-headers -disable-checker deadcode.DeadStores make

#
# Coverity
#
    - if: branch = master
      env:
        - TEST="Coverity"
      addons:
        coverity_scan:
            project:
                name: "$COVERITY_PROJECT_NAME"
                description: "Build submitted via Travis CI"
            notification_email: $COVERITY_NOTIFICATION_EMAIL
            build_command_prepend: "./autogen.sh; ./configure --enable-debug; make clean"
            build_command:   "make"
            branch_pattern: $COVERITY_BRANCH_PATTERN
      before_install:
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
      script:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

#
# SonarCloud
#
    - if: branch = master
      env:
        - TEST="SonarCloud"
      addons:
        sonarcloud:
            organization: "drakvuf"
            token: "$SONAR_TOKEN"
      script:
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then exit 0; fi'
        - sudo apt-get update
        - sudo apt-get -q -y install bison flex libjson-c-dev autoconf-archive libxen-dev
        - git submodule update --init libvmi
        - cd libvmi
        - autoreconf -vif
        - ./configure --disable-kvm --disable-file --disable-bareflank --disable-safety-checks
        - make
        - sudo make install
        - cd ..
        - ./autogen.sh
        - ./configure --enable-debug
        - build-wrapper-linux-x86-64 --out-dir bw-output make -j2
        - sonar-scanner

#
# Build binary packages and push them as releases on drakvuf-builds
#
    - if: branch = master
      env:
        - TEST="package build"
      script:
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then exit 0; fi'
        - git submodule update --init libvmi xen
        - travis_wait 60 sh package/build.sh;
      cache:
        directories:
          - package/cache
      before_deploy:
        - git config --local user.name "drakvuf-builds"
        - git config --local user.email "drakvuf-builds@tklsoftware.com"
        - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)}
        - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        edge: true
        repo: tklengyel/drakvuf-builds
        file:
          - package/out/**/*
